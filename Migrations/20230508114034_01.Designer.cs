// <auto-generated />
using System;
using Entities.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace tasApi.Migrations
{
    [DbContext(typeof(TasDB))]
    [Migration("20230508114034_01")]
    partial class _01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Choice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("NextSceneId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnSceneId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NextSceneId");

                    b.HasIndex("OwnSceneId");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("Entities.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("stackable")
                        .HasColumnType("bit");

                    b.Property<bool>("unique")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Entities.Models.ManyToMany.ItemType", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("Entities.Models.ManyToMany.SceneItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "SceneId");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneItems");
                });

            modelBuilder.Entity("Entities.Models.ManyToMany.SceneType", b =>
                {
                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("SceneId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("SceneTypes");
                });

            modelBuilder.Entity("Entities.Models.Scene", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("storyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("Entities.Models.SceneEffect", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("goldChange")
                        .HasColumnType("int");

                    b.Property<int?>("hpChange")
                        .HasColumnType("int");

                    b.Property<int>("sceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("sceneId")
                        .IsUnique();

                    b.ToTable("SceneEffects");
                });

            modelBuilder.Entity("Entities.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Entities.Models.Choice", b =>
                {
                    b.HasOne("Entities.Models.Scene", "NextScene")
                        .WithMany("PrecidingChoices")
                        .HasForeignKey("NextSceneId");

                    b.HasOne("Entities.Models.Scene", "OwnScene")
                        .WithMany("OwnChoices")
                        .HasForeignKey("OwnSceneId");

                    b.Navigation("NextScene");

                    b.Navigation("OwnScene");
                });

            modelBuilder.Entity("Entities.Models.ManyToMany.ItemType", b =>
                {
                    b.HasOne("Entities.Models.Item", "Item")
                        .WithMany("ItemTypes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Type", "Type")
                        .WithMany("ItemTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Entities.Models.ManyToMany.SceneItem", b =>
                {
                    b.HasOne("Entities.Models.Item", "Item")
                        .WithMany("SceneItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Scene", "Scene")
                        .WithMany("ItemTypes")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("Entities.Models.ManyToMany.SceneType", b =>
                {
                    b.HasOne("Entities.Models.Scene", "Scene")
                        .WithMany("SceneTypes")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Type", "Type")
                        .WithMany("SceneTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scene");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Entities.Models.SceneEffect", b =>
                {
                    b.HasOne("Entities.Models.Scene", "Scene")
                        .WithOne("SceneEffect")
                        .HasForeignKey("Entities.Models.SceneEffect", "sceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("Entities.Models.Item", b =>
                {
                    b.Navigation("ItemTypes");

                    b.Navigation("SceneItems");
                });

            modelBuilder.Entity("Entities.Models.Scene", b =>
                {
                    b.Navigation("ItemTypes");

                    b.Navigation("OwnChoices");

                    b.Navigation("PrecidingChoices");

                    b.Navigation("SceneEffect");

                    b.Navigation("SceneTypes");
                });

            modelBuilder.Entity("Entities.Models.Type", b =>
                {
                    b.Navigation("ItemTypes");

                    b.Navigation("SceneTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
